// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sator.App.Persistencia;

namespace Sator.App.Persistencia.Migrations
{
    [DbContext(typeof(AppContext))]
    partial class AppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Sator.App.Dominio.Carta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("Cartas");
                });

            modelBuilder.Entity("Sator.App.Dominio.FormaPago", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("FormaPagos");
                });

            modelBuilder.Entity("Sator.App.Dominio.Genero", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("abreviatura")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("Sator.App.Dominio.Ingrediente", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Productoid")
                        .HasColumnType("int");

                    b.Property<float>("cantidad")
                        .HasColumnType("real");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Productoid");

                    b.ToTable("Ingredientes");
                });

            modelBuilder.Entity("Sator.App.Dominio.Pedido", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("clienteid")
                        .HasColumnType("int");

                    b.Property<int?>("empleadoid")
                        .HasColumnType("int");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("formapagoid")
                        .HasColumnType("int");

                    b.Property<DateTime>("horaentrega")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("horapedido")
                        .HasColumnType("datetime2");

                    b.Property<int?>("tipoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("clienteid");

                    b.HasIndex("empleadoid");

                    b.HasIndex("formapagoid");

                    b.HasIndex("tipoid");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Sator.App.Dominio.Persona", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("admin")
                        .HasColumnType("bit");

                    b.Property<string>("apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contrasena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fec_nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("generoid")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("num_cel")
                        .HasColumnType("real");

                    b.Property<int?>("tipoidid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("generoid");

                    b.HasIndex("tipoidid");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Sator.App.Dominio.Producto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("tipoproductoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("tipoproductoid");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Sator.App.Dominio.ProductoTamano", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("Cartaid")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("precio")
                        .HasColumnType("int");

                    b.Property<int?>("tamanoid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("Cartaid");

                    b.HasIndex("tamanoid");

                    b.ToTable("ProductosTamanos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ProductoTamano");
                });

            modelBuilder.Entity("Sator.App.Dominio.Sucursal", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("cartaid")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("estado")
                        .HasColumnType("bit");

                    b.Property<int>("num_cel")
                        .HasColumnType("int");

                    b.Property<int>("num_fijo")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("cartaid");

                    b.ToTable("Sucursales");
                });

            modelBuilder.Entity("Sator.App.Dominio.Tamano", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Tamanos");
                });

            modelBuilder.Entity("Sator.App.Dominio.TipoId", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("numeroID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipoID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TiposIds");
                });

            modelBuilder.Entity("Sator.App.Dominio.TipoPedido", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TipoPedidos");
                });

            modelBuilder.Entity("Sator.App.Dominio.TipoProducto", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("TiposProductos");
                });

            modelBuilder.Entity("Sator.App.Dominio.Orden", b =>
                {
                    b.HasBaseType("Sator.App.Dominio.ProductoTamano");

                    b.Property<int?>("Pedidoid")
                        .HasColumnType("int");

                    b.Property<int>("cantidad")
                        .HasColumnType("int");

                    b.HasIndex("Pedidoid");

                    b.HasDiscriminator().HasValue("Orden");
                });

            modelBuilder.Entity("Sator.App.Dominio.Ingrediente", b =>
                {
                    b.HasOne("Sator.App.Dominio.Producto", null)
                        .WithMany("ingrediente")
                        .HasForeignKey("Productoid");
                });

            modelBuilder.Entity("Sator.App.Dominio.Pedido", b =>
                {
                    b.HasOne("Sator.App.Dominio.Persona", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteid");

                    b.HasOne("Sator.App.Dominio.Persona", "empleado")
                        .WithMany()
                        .HasForeignKey("empleadoid");

                    b.HasOne("Sator.App.Dominio.FormaPago", "formapago")
                        .WithMany()
                        .HasForeignKey("formapagoid");

                    b.HasOne("Sator.App.Dominio.TipoPedido", "tipo")
                        .WithMany()
                        .HasForeignKey("tipoid");

                    b.Navigation("cliente");

                    b.Navigation("empleado");

                    b.Navigation("formapago");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("Sator.App.Dominio.Persona", b =>
                {
                    b.HasOne("Sator.App.Dominio.Genero", "genero")
                        .WithMany()
                        .HasForeignKey("generoid");

                    b.HasOne("Sator.App.Dominio.TipoId", "tipoid")
                        .WithMany()
                        .HasForeignKey("tipoidid");

                    b.Navigation("genero");

                    b.Navigation("tipoid");
                });

            modelBuilder.Entity("Sator.App.Dominio.Producto", b =>
                {
                    b.HasOne("Sator.App.Dominio.TipoProducto", "tipoproducto")
                        .WithMany()
                        .HasForeignKey("tipoproductoid");

                    b.Navigation("tipoproducto");
                });

            modelBuilder.Entity("Sator.App.Dominio.ProductoTamano", b =>
                {
                    b.HasOne("Sator.App.Dominio.Carta", null)
                        .WithMany("productos")
                        .HasForeignKey("Cartaid");

                    b.HasOne("Sator.App.Dominio.Tamano", "tamano")
                        .WithMany()
                        .HasForeignKey("tamanoid");

                    b.Navigation("tamano");
                });

            modelBuilder.Entity("Sator.App.Dominio.Sucursal", b =>
                {
                    b.HasOne("Sator.App.Dominio.Carta", "carta")
                        .WithMany()
                        .HasForeignKey("cartaid");

                    b.Navigation("carta");
                });

            modelBuilder.Entity("Sator.App.Dominio.Orden", b =>
                {
                    b.HasOne("Sator.App.Dominio.Pedido", null)
                        .WithMany("orden")
                        .HasForeignKey("Pedidoid");
                });

            modelBuilder.Entity("Sator.App.Dominio.Carta", b =>
                {
                    b.Navigation("productos");
                });

            modelBuilder.Entity("Sator.App.Dominio.Pedido", b =>
                {
                    b.Navigation("orden");
                });

            modelBuilder.Entity("Sator.App.Dominio.Producto", b =>
                {
                    b.Navigation("ingrediente");
                });
#pragma warning restore 612, 618
        }
    }
}
